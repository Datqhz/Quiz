// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Quiz.Task.Service.DBContexts;

#nullable disable

namespace Quiz.Task.Service.Migrations
{
    [DbContext(typeof(TaskServiceContext))]
    partial class TaskServiceContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Quiz.Task.Service.Models.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("Quiz.Task.Service.Models.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("StudySetId")
                        .HasColumnType("int");

                    b.Property<string>("Term")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("StudySetId");

                    b.ToTable("Card");
                });

            modelBuilder.Entity("Quiz.Task.Service.Models.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValue(new DateTime(2024, 5, 22, 20, 43, 58, 479, DateTimeKind.Local).AddTicks(9435));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Class");
                });

            modelBuilder.Entity("Quiz.Task.Service.Models.Folder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValue(new DateTime(2024, 5, 22, 20, 43, 58, 480, DateTimeKind.Local).AddTicks(1687));

                    b.Property<string>("FolderName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("UserId");

                    b.ToTable("Folder");
                });

            modelBuilder.Entity("Quiz.Task.Service.Models.FolderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("FolderId")
                        .HasColumnType("int");

                    b.Property<int>("StudySetId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FolderId");

                    b.HasIndex("StudySetId");

                    b.ToTable("FolderDetail");
                });

            modelBuilder.Entity("Quiz.Task.Service.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Group");
                });

            modelBuilder.Entity("Quiz.Task.Service.Models.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("UserId");

                    b.ToTable("Member");
                });

            modelBuilder.Entity("Quiz.Task.Service.Models.StudySet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValue(new DateTime(2024, 5, 22, 20, 43, 58, 481, DateTimeKind.Local).AddTicks(1394));

                    b.Property<string>("StudySetName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("StudySet");
                });

            modelBuilder.Entity("Quiz.Task.Service.Models.UserInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(6)")
                        .HasDefaultValue(new DateTime(2024, 5, 22, 20, 43, 58, 479, DateTimeKind.Local).AddTicks(2750));

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.HasIndex("GroupId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Quiz.Task.Service.Models.Card", b =>
                {
                    b.HasOne("Quiz.Task.Service.Models.StudySet", "StudySet")
                        .WithMany("Cards")
                        .HasForeignKey("StudySetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StudySet");
                });

            modelBuilder.Entity("Quiz.Task.Service.Models.Class", b =>
                {
                    b.HasOne("Quiz.Task.Service.Models.UserInfo", "User")
                        .WithMany("Classes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Quiz.Task.Service.Models.Folder", b =>
                {
                    b.HasOne("Quiz.Task.Service.Models.Class", "Class")
                        .WithMany("Folders")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quiz.Task.Service.Models.UserInfo", "User")
                        .WithMany("Folders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Quiz.Task.Service.Models.FolderDetail", b =>
                {
                    b.HasOne("Quiz.Task.Service.Models.Folder", "Folder")
                        .WithMany("FolderDetails")
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quiz.Task.Service.Models.StudySet", "StudySet")
                        .WithMany("FolderDetails")
                        .HasForeignKey("StudySetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Folder");

                    b.Navigation("StudySet");
                });

            modelBuilder.Entity("Quiz.Task.Service.Models.Member", b =>
                {
                    b.HasOne("Quiz.Task.Service.Models.Class", "Class")
                        .WithMany("Members")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quiz.Task.Service.Models.UserInfo", "User")
                        .WithMany("Members")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Quiz.Task.Service.Models.StudySet", b =>
                {
                    b.HasOne("Quiz.Task.Service.Models.UserInfo", "User")
                        .WithMany("StudySets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Quiz.Task.Service.Models.UserInfo", b =>
                {
                    b.HasOne("Quiz.Task.Service.Models.Account", "Account")
                        .WithOne("User")
                        .HasForeignKey("Quiz.Task.Service.Models.UserInfo", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Quiz.Task.Service.Models.Group", "Group")
                        .WithMany("Users")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Quiz.Task.Service.Models.Account", b =>
                {
                    b.Navigation("User")
                        .IsRequired();
                });

            modelBuilder.Entity("Quiz.Task.Service.Models.Class", b =>
                {
                    b.Navigation("Folders");

                    b.Navigation("Members");
                });

            modelBuilder.Entity("Quiz.Task.Service.Models.Folder", b =>
                {
                    b.Navigation("FolderDetails");
                });

            modelBuilder.Entity("Quiz.Task.Service.Models.Group", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Quiz.Task.Service.Models.StudySet", b =>
                {
                    b.Navigation("Cards");

                    b.Navigation("FolderDetails");
                });

            modelBuilder.Entity("Quiz.Task.Service.Models.UserInfo", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("Folders");

                    b.Navigation("Members");

                    b.Navigation("StudySets");
                });
#pragma warning restore 612, 618
        }
    }
}
